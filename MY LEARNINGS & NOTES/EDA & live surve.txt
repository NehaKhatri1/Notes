


  I am directly invloved in taking data from various vendors (millions of rows in every 7 days). 
  I have developed a generic software using Mapreduce which performs EDA(exploratory data analysis) to check the intergrity of the data like if the data i have got from various sources are statistically 
 matching with the measures provided in reference file or if some data is missing(when statistics don't match) . After the confirmation & validation of the 
 data , Customised processing (such as capping of certain variables) is done on the basis of certain rules defined in Controller file . The mapreduce output produced is pushed to Kafka Producer for further processing.




A sanity test or sanity check is a basic test to quickly evaluate whether a claim or the result of a calculation can possibly be true.
 Smoke testing is a wide approach where all areas of the software application are tested without getting into too deep. However, a sanity software testing is a narrow regression testing with a focus on one or a small set of areas of functionality of the software application.




exploratory data analysis
In statistics, exploratory data analysis (EDA) is an approach to analyzing data sets to summarize their main characteristics, often with visual methods. A statistical model can be used or not, but primarily EDA is for seeing what the data can tell us beyond the formal modeling or hypothesis testing task.


EDA is one of the crucial step in data science that allows us to achieve certain insights and statistical measure 
that is essential for the business continuity, stockholders and data scientists. ... EDA helps you in confirming and validating the hypothesis you make





live survelliance 

live survelliance using IOT, Kafka & spark streaming

Key takeaways
Introduction - IoT Connected Vehicles and Apache Spark
Technologies and Tools for this application
Application to generate IoT Data events using Apache Kafka
Application to process IoT Data Streams using Spark Streaming.Process and transform IoTData events into Total traffic count, Window traffic count and POI traffic detail
Build IoT Traffic Data Monitoring Dashboard using Spring Boot, Web socket, jQuery, Sockjs and Bootstrap





IoT and Connected Vehicles
 IoT Components are interconnected devices over the network, which are embedded with sensors, software and smart apps so they can collect and exchange data with each other or with cloud/data centres. The data generated by IoT devices is large in volume and random in nature and needs to be analysed using a big data analytics engine in order to extract the critical information or to understand the user behavioural patterns.
Internet of Things (IoT) is an emerging disruptive technology and is becoming an increasing topic of interest among technology giants and business communities.



Live survelliance application 
 
This application will process real time IoT data sent by connected vehicles and use that data to monitor the traffic on different routes. We will divide this application into following three modules. These modules are standalone Maven applications written in Java and can be built and run independently.


IoT Data Producer: Connected vehicles generate IoT messages which are captured by a message broker and are sent to the streaming application for processing. In our sample application, IoT data producer is a simulator application for connected vehicles and uses Apache Kafka to generate IoT data events.

IoT Data Processor: This is a Spark Streaming application which consumes IoT data streams and processes them for traffic data analysis. IoT data processor provides the following metrics:

Get the total vehicle count for different types of vehicles on different routes and store them in a Cassandra database.
Get vehicle count for the window of last 30 seconds, for different types of vehicles on different routes and store them in the Cassandra database.
Get the details of vehicles which are in the radius of a given Point of Interest (POI) and store the details in Cassandra database.
IoT Data Dashboard: This is a Spring Boot application which will retrieve data from the Cassandra database and send it to the web page. This application uses Web Sockets and jQuery to push the data to the web page in fixed intervals so data will be refreshed automatically. Dashboard displays data in charts and tables. This web page uses bootstrap.js for responsive web design, so it’s accessible on desktop as well as mobile devices.

IoT Data Dashboard: This is a Spring Boot application which will retrieve data from the Cassandra database and send it to the web page. This application uses Web Sockets and jQuery to push the data to the web page in fixed intervals so data will be refreshed automatically. Dashboard displays data in charts and tables. This web page uses bootstrap.js for responsive web design, so it’s accessible on desktop as well as mobile devices.











